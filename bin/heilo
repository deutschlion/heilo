#!/usr/bin/env node

const {resolve} = require('path')
const parse = require('minimist')
const heilo = require('../')

const args = parse(process.argv, {
  alias: {
    h: 'help',
    p: 'port',
    i: 'interval',
    d: 'debug',
    f: 'file'
  },
  boolean: ['h', 'd']
})

const help = () => {
  console.log(`
  Usage: heilo [options] <hostname>

  hostname        absolute URL to ping (e.g. https://example.com)
  
  Options:

  -h, --help                          Output usage information
  -d, --debug                         Debug Mode (log to STDOUT)
  -p PORT, --port=PORT                Port to ping (e.g. 3000)
  -i INTERVAL, --interval=INTERVAL    Ping interval (default to '10m') - refer to 'github.com/zeit/ms' for available values
  -f FILE, --file=FILE                .js file exporting a function to handle ping results (e.g. send notification when server is DOWN)
  `);
}

if (args.h) {
  help();
  process.exit(0);
}

let [,,hostname] = args._

if (!hostname) {
  console.log('heilo: Please provide a host to ping')
  help()
  process.exit(1)
}

require('async-to-gen/register')

let reporting = err => {
  console.error('report:', JSON.stringify(err))
}

let file = args.f
if (file) {
  if ('/' !== file) {
    file = resolve(process.cwd(), file)
  }

  try {
    reporting = require(file);
    if (reporting && 'object' === typeof reporting) {
      reporting = reporting.default;
    }

    if ('function' !== typeof reporting) {
      console.error(`heilo: "${file}" does not export a function.`)
      process.exit(1)
    }
  } catch (err) {
    console.error(`heilo: Error when importing ${file}: ${err.stack}`)
    process.exit(1)
  }
}

const url = args.p ? `${hostname}:${args.p}` : `${hostname}`;
heilo(url, {
  interval: args.i,
  debug: args.d,
  report: reporting
})
